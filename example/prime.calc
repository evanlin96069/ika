// Miller-Rabin primality test

// LCG
var seed = 0;
fn rand() {
    seed = (seed * 8121 + 28411) % 65536;
    return seed;
}

// (x^y) % p
fn pow(x, y, p) {
    var res = 1;
    x %= p;

    while (y > 0) {
        if (y % 2 == 1) {
            res = (res * x) % p;
        }

        y /= 2;
        x = (x * x) % p;
    }
    return res;
}

fn miller_test(d, n) {
    var a = 2 + rand() % (n - 4);
    var x = pow(a, d, n);

    if (x == 1 || x == n - 1) {
        return 1;
    }

    while (d != n - 1) {
        x = (x * x) % n;
        d *= 2;
        if (x == 1) {
            return 0;
        }

        if (x == n - 1) {
            return 1;
        }
    }

    return 0;
}

fn is_prime(n, k) {
    if (n <= 1 || n == 4) {
        return 0;
    }

    if (n <= 3) {
        return 1;
    }

    var d = n - 1;
    while (d % 2 == 0) {
        d /= 2;
    }

    var i = 0;
    while (i < k) : (i += 1) {
        if (!miller_test(d, n)) {
            return 0;
        }
    }
    return 1;
}

fn main() {
    var k = 4;

    var i = 0;
    while (i < 10000) : (i += 1) {
        if (is_prime(i, k)) {
            print(i);
        }
    }
}

main();
