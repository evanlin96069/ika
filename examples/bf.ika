// A simple brainfuck interpreter

#include "libc.ika"

const TAPE_LENGTH = 32768;

fn interpreter(code: []u8) void {
    var tape: []u8 = calloc(TAPE_LENGTH, 1);
    if (tape == null) {
        "Buy more ram\n";
        exit(1);
    }

    var ptr: []u8 = tape;
    var loop: i32;

    var code_size: u32 = strlen(code);

    var i: u32 = 0;
    while (i < code_size) : (i += 1) {
        var c: u8 = code[i];

        if (c == '>') {
            ptr += 1;
        } else if (c == '<') {
            ptr -= 1;
        } else if (c == '+') {
            *ptr += 1;
        } else if (c == '-') {
            *ptr -= 1;
        } else if (c == '.') {
            putchar(*ptr);
        } else if (c == ',') {
            *ptr = getchar();
        } else if (c == '[') {
            if (*ptr == 0) {
                loop = 1;
                while (loop > 0) {
                    i += 1;
                    if (code[i] == '[') {
                        loop += 1;
                    } else if (code[i] == ']') {
                        loop -= 1;
                    }
                }
            }
        } else if (c == ']') {
            if (*ptr != '\0') {
                loop = 1;
                while (loop > 0) {
                    i -= 1;
                    if (code[i] == '[') {
                        loop -= 1;
                    } else if (code[i] == ']') {
                        loop += 1;
                    }
                }
            }
        }
    }

    free(tape);
}

fn main() void {
    if (argc != 2) {
        "usage: bf <src path>\n";
        exit(1);
    }

    var src_path: []u8 = argv[1];

    var fp: *FILE = fopen(src_path, "r");
    if (fp == null) {
        "Failed to open file: %s\n", src_path;
        exit(1);
    }

    fseek(fp, 0, SEEK_END);
    var code_size: i32 = ftell(fp);
    rewind(fp);

    var code: []u8 = malloc(code_size + 1);
    if (code == null) {
        "Buy more ram\n";
        exit(1);
    }

    fread(code, 1, code_size, fp);
    fclose(fp);

    code[code_size] = '\0';

    interpreter(code);

    free(code);
}

main();
