// Miller-Rabin primality test

// LCG
var seed: u32 = 0;
fn rand() i32 {
    seed = (seed * 8121 + 28411) % 65536;
    return seed;
}

// (x^y) % p
fn pow(x: i32, y: i32, p: i32) i32 {
    var res: i32 = 1;
    x %= p;

    while (y > 0) {
        if (y % 2 == 1) {
            res = (res * x) % p;
        }

        y /= 2;
        x = (x * x) % p;
    }
    return res;
}

fn miller_test(d: i32, n: i32) bool {
    var a: i32 = 2 + rand() % (n - 4);
    var x: i32 = pow(a, d, n);

    if (x == 1 || x == n - 1) {
        return true;
    }

    while (d != n - 1) {
        x = (x * x) % n;
        d *= 2;
        if (x == 1) {
            return false;
        }

        if (x == n - 1) {
            return true;
        }
    }

    return false;
}

fn is_prime(n: i32, k: i32) bool {
    if (n <= 1 || n == 4) {
        return false;
    }

    if (n <= 3) {
        return true;
    }

    var d: i32 = n - 1;
    while (d % 2 == 0) {
        d /= 2;
    }

    var i: i32 = 0;
    while (i < k) : (i += 1) {
        if (!miller_test(d, n)) {
            return false;
        }
    }
    return true;
}

fn main() void {
    const k = 4;

    var i: i32 = 0;
    while (i < 10000) : (i += 1) {
        if (is_prime(i, k)) {
            "%d\n", i;
        }
    }
}

main();
